<?php

// Class: Milestones.class.php
// Table: ts_milestones
// Generated by createEntity.php, written by Paulo Ferreira (paulo.ferreira@arkium.eu)
// Date : Sat, 08 Feb 2014 09:46:43 +0000
namespace Library\Entities;

class Milestones extends \Library\Entity {

	protected $task_id, $milestone_type_id, $milestone_field_id, $name, $show_field, $date, $comment, $update_time, $created_time;

	const TASK_ID_INVALIDE = 2;

	const MILESTONE_TYPE_ID_INVALIDE = 3;

	const MILESTONE_FIELD_ID_INVALIDE = 4;

	const NAME_INVALIDE = 5;

	const SHOW_FIELD_INVALIDE = 6;

	const DATE_INVALIDE = 7;

	const COMMENT_INVALIDE = 8;

	const UPDATE_TIME_INVALIDE = 9;

	const CREATED_TIME_INVALIDE = 10;

	public function isValid() {
		return (isset($this->task_id) && isset($this->milestone_type_id) && isset($this->milestone_field_id) && isset($this->name) && isset($this->show_field) && isset($this->date) && isset($this->comment) && isset($this->update_time) && isset($this->created_time));
	}
	
	// SETTERS //
	public function setMilestone_id($milestone_id) {
		$this->id = (int) $milestone_id;
	}

	public function setTask_id($task_id) {
		if (!isset($task_id) || !is_int($task_id)) {
			$this->erreurs[] = self::TASK_ID_INVALIDE;
		} else {
			$this->task_id = (int) $task_id;
		}
	}

	public function setMilestone_type_id($milestone_type_id) {
		if (!isset($milestone_type_id) || !is_int($milestone_type_id)) {
			$this->erreurs[] = self::MILESTONE_TYPE_ID_INVALIDE;
		} else {
			$this->milestone_type_id = (int) $milestone_type_id;
		}
	}

	public function setMilestone_field_id($milestone_field_id) {
		if (!isset($milestone_field_id) || !is_int($milestone_field_id)) {
			$this->erreurs[] = self::MILESTONE_FIELD_ID_INVALIDE;
		} else {
			$this->milestone_field_id = (int) $milestone_field_id;
		}
	}

	public function setName($name) {
		if (!isset($name) || !is_string($name)) {
			$this->erreurs[] = self::NAME_INVALIDE;
		} else {
			$this->name = (string) $name;
		}
	}

	public function setShow_field($show_field) {
		if (!isset($show_field) || !is_int($show_field)) {
			$this->erreurs[] = self::SHOW_FIELD_INVALIDE;
		} else {
			$this->show_field = (int) $show_field;
		}
	}

	public function setDate($date) {
		$this->date = (string) $date;
	}

	public function setComment($comment) {
		$this->comment = (string) $comment;
	}

	public function setUpdate_time($update_time) {
		if (!isset($update_time) || !is_string($update_time)) {
			$this->erreurs[] = self::UPDATE_TIME_INVALIDE;
		} else {
			$this->update_time = (string) $update_time;
		}
	}

	public function setCreated_time($created_time) {
		$this->created_time = (string) $created_time;
	}
	
	// GETTERS //
	public function milestone_id() {
		return $this->id;
	}

	public function task_id() {
		return $this->task_id;
	}

	public function milestone_type_id() {
		return $this->milestone_type_id;
	}

	public function milestone_field_id() {
		return $this->milestone_field_id;
	}

	public function name() {
		return $this->name;
	}

	public function show_field() {
		return $this->show_field;
	}

	public function date() {
		return $this->date;
	}

	public function comment() {
		return $this->comment;
	}

	public function update_time() {
		return $this->update_time;
	}

	public function created_time() {
		return $this->created_time;
	}
}