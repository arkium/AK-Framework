<?php

// Class: Projects.class.php
// Table: ts_projects
// Generated by createEntity.php, written by Paulo Ferreira (paulo.ferreira@arkium.eu)
// Date : Sat, 14 Dec 2013 17:14:18 +0000
namespace Library\Entities;

class Projects extends \Library\Entity {

	protected $code, $name, $invoicing_entity_id, $customer_id, $note, $status, $update_time, $created_time;

	const CODE_INVALIDE = 2;

	const NAME_INVALIDE = 3;

	const INVOICING_ENTITY_ID_INVALIDE = 4;

	const CUSTOMER_ID_INVALIDE = 5;

	const NOTE_INVALIDE = 6;

	const STATUS_INVALIDE = 7;

	const UPDATE_TIME_INVALIDE = 8;

	const CREATED_TIME_INVALIDE = 9;

	public function isValid() {
		return (isset($this->code) && isset($this->name) && isset($this->invoicing_entity_id) && isset($this->customer_id) && isset($this->note) && isset($this->status) && isset($this->update_time) && isset($this->created_time));
	}
	
	// SETTERS //
	public function setProject_id($project_id) {
		$this->id = (int) $project_id;
	}

	public function setCode($code) {
		if (!isset($code) || !is_string($code)) {
			$this->erreurs[] = self::CODE_INVALIDE;
		} else {
			$this->code = (string) $code;
		}
	}

	public function setName($name) {
		if (!isset($name) || !is_string($name)) {
			$this->erreurs[] = self::NAME_INVALIDE;
		} else {
			$this->name = (string) $name;
		}
	}

	public function setInvoicing_entity_id($invoicing_entity_id) {
		if (!isset($invoicing_entity_id) || !is_int($invoicing_entity_id)) {
			$this->erreurs[] = self::INVOICING_ENTITY_ID_INVALIDE;
		} else {
			$this->invoicing_entity_id = (int) $invoicing_entity_id;
		}
	}

	public function setCustomer_id($customer_id) {
		if (!isset($customer_id) || !is_int($customer_id)) {
			$this->erreurs[] = self::CUSTOMER_ID_INVALIDE;
		} else {
			$this->customer_id = (int) $customer_id;
		}
	}

	public function setNote($note) {
		$this->note = (string) $note;
	}

	public function setStatus($status) {
		if (!isset($status) || !is_int($status)) {
			$this->erreurs[] = self::STATUS_INVALIDE;
		} else {
			$this->status = (int) $status;
		}
	}

	public function setUpdate_time($update_time) {
		if (!isset($update_time) || !is_string($update_time)) {
			$this->erreurs[] = self::UPDATE_TIME_INVALIDE;
		} else {
			$this->update_time = (string) $update_time;
		}
	}

	public function setCreated_time($created_time) {
		$this->created_time = (string) $created_time;
	}
	
	// GETTERS //
	public function project_id() {
		return $this->id;
	}

	public function code() {
		return $this->code;
	}

	public function name() {
		return $this->name;
	}

	public function invoicing_entity_id() {
		return $this->invoicing_entity_id;
	}

	public function customer_id() {
		return $this->customer_id;
	}

	public function note() {
		return $this->note;
	}

	public function status() {
		return $this->status;
	}

	public function update_time() {
		return $this->update_time;
	}

	public function created_time() {
		return $this->created_time;
	}
}