<?php

// Class: Timesheets.class.php
// Table: ts_timesheets
// Generated by createEntity.php, written by Paulo Ferreira (paulo.ferreira@arkium.eu)
// Date : Tue, 05 Nov 2013 19:05:42 +0000
namespace Library\Entities;

class Timesheets extends \Library\Entity {

	protected $user_id, $period_id, $user_rate_id, $date, $duration, $task_id, $task_type_id, $comment, $update_time, $created_time;

	const USER_ID_INVALIDE = 2;

	const PERIOD_ID_INVALIDE = 3;

	const USER_RATE_ID_INVALIDE = 4;

	const DATE_INVALIDE = 5;

	const DURATION_INVALIDE = 6;

	const TASK_ID_INVALIDE = 7;

	const TASK_TYPE_ID_INVALIDE = 8;

	const COMMENT_INVALIDE = 9;

	const UPDATE_TIME_INVALIDE = 10;

	const CREATED_TIME_INVALIDE = 11;

	public function isValid() {
		return (isset($this->user_id) && isset($this->period_id) && isset($this->user_rate_id) && isset($this->date) && isset($this->duration) && isset($this->task_id) && isset($this->task_type_id) && isset($this->comment) && isset($this->update_time) && isset($this->created_time));
	}
	
	// SETTERS //
	public function setTime_id($time_id) {
		$this->id = (int) $time_id;
	}

	public function setUser_id($user_id) {
		if (!isset($user_id) || !is_int($user_id)) {
			$this->erreurs[] = self::USER_ID_INVALIDE;
		} else {
			$this->user_id = (int) $user_id;
		}
	}

	public function setPeriod_id($period_id) {
		if (!isset($period_id) || !is_int($period_id)) {
			$this->erreurs[] = self::PERIOD_ID_INVALIDE;
		} else {
			$this->period_id = (int) $period_id;
		}
	}

	public function setUser_rate_id($user_rate_id) {
		if (!isset($user_rate_id) || !is_int($user_rate_id)) {
			$this->erreurs[] = self::USER_RATE_ID_INVALIDE;
		} else {
			$this->user_rate_id = (int) $user_rate_id;
		}
	}

	public function setDate($date) {
		if (!isset($date) || !is_string($date)) {
			$this->erreurs[] = self::DATE_INVALIDE;
		} else {
			$this->date = (string) $date;
		}
	}

	public function setDuration($duration) {
		$this->duration = (string) $duration;
	}

	public function setTask_id($task_id) {
		$this->task_id = (int) $task_id;
	}

	public function setTask_type_id($task_type_id) {
		$this->task_type_id = (int) $task_type_id;
	}

	public function setComment($comment) {
		$this->comment = (string) $comment;
	}

	public function setUpdate_time($update_time) {
		if (!isset($update_time) || !is_string($update_time)) {
			$this->erreurs[] = self::UPDATE_TIME_INVALIDE;
		} else {
			$this->update_time = (string) $update_time;
		}
	}

	public function setCreated_time($created_time) {
		$this->created_time = (string) $created_time;
	}
	
	// GETTERS //
	public function time_id() {
		return $this->id;
	}

	public function user_id() {
		return $this->user_id;
	}

	public function period_id() {
		return $this->period_id;
	}

	public function user_rate_id() {
		return $this->user_rate_id;
	}

	public function date() {
		return $this->date;
	}

	public function duration() {
		return $this->duration;
	}

	public function task_id() {
		return $this->task_id;
	}

	public function task_type_id() {
		return $this->task_type_id;
	}

	public function comment() {
		return $this->comment;
	}

	public function update_time() {
		return $this->update_time;
	}

	public function created_time() {
		return $this->created_time;
	}
}