<?php

// Class: MilestonesManager_PDO.class.php
// Table: ts_milestones
// Generated by createEntity.php, written by Paulo Ferreira (paulo.ferreira@arkium.eu)
// Date : Sat, 08 Feb 2014 09:46:43 +0000
namespace Library\Models;

class MilestonesManager_PDO extends MilestonesManager {

	private function getData(\Library\HTTPRequest $request) {
		return new \Library\Entities\Milestones(array(
				'milestone_id' => (int) $request->postData('milestone_id'),
				'task_id' => (int) $request->postData('task_id'),
				'milestone_type_id' => (int) $request->postData('milestone_type_id'),
				'milestone_field_id' => (int) $request->postData('milestone_field_id'),
				'name' => (string) $request->postData('name'),
				'show_field' => (int) $request->postData('show_field'),
				'date' => (string) $request->postData('date'),
				'comment' => (string) $request->postData('comment'),
				'update_time' => (string) $request->postData('update_time'),
				'created_time' => (string) $request->postData('created_time') 
		));
	}

	public function getDatabases(\Library\HTTPRequest $request, \Library\Datatable $ini) {
		$table = new \Library\Datatables($request, $ini);
		return $table->run();
	}

	public function getList($debut = -1, $limite = -1) {
		$query = "SELECT * FROM ts_milestones";
		if ($debut != -1 || $limite != -1) {
			$query .= ' LIMIT ' . (int) $limite . ' OFFSET ' . (int) $debut;
		}
		try {
			$result = parent::$dao->query($query);
			$output = $result->fetchAll();
			$result->closeCursor();
		} catch (\PDOException $e) {
			$output['reponse'] = 'The database is not able to be read!<br/>';
			$output['reponse'] .= "Code Error: " . $e->getCode() . "<br/>";
			$output['reponse'] .= "Syntax Error: " . $e->getMessage();
		}
		return $output;
	}

	public function getUnique($id) {
		$query = "SELECT 
			milestone_id,
			task_id,
			milestone_type_id,
			milestone_field_id,
			name,
			show_field,
			date,
			comment,
			update_time,
			created_time
		FROM ts_milestones
		WHERE milestone_id = :id";
		try {
			$result = parent::$dao->prepare($query);
			$result->bindValue(':id', (int) $id, \PDO::PARAM_INT);
			$result->execute();
			// $result->setFetchMode(\PDO::FETCH_CLASS | \PDO::FETCH_PROPS_LATE, '\Library\Entities\Milestones');
			$output = (array) $result->fetch(\PDO::FETCH_NUM);
			
			$output['reponse'] = true;
		} catch (\PDOException $e) {
			$output['reponse'] = 'The database is not able to be read!<br/>';
			$output['reponse'] .= "Code Error: " . $e->getCode() . "<br/>";
			$output['reponse'] .= "Syntax Error: " . $e->getMessage();
		}
		return $output;
	}

	public function count() {
		$query = "SELECT COUNT(*) FROM ts_milestones";
		return parent::$dao->query($query)->fetchColumn();
	}

	public function add(\Library\HTTPRequest $request) {
		$milestones = $this->getData($request);
		$query = "INSERT INTO ts_milestones SET 
			task_id = :task_id,
			milestone_type_id = :milestone_type_id,
			milestone_field_id = :milestone_field_id,
			name = :name,
			show_field = :show_field,
			date = :date,
			comment = :comment,
			created_time = NOW()";
		try {
			parent::$dao->beginTransaction();
			$result = parent::$dao->prepare($query);
			
			$result->bindValue(':task_id', $milestones->task_id());
			$result->bindValue(':milestone_type_id', $milestones->milestone_type_id());
			$result->bindValue(':milestone_field_id', $milestones->milestone_field_id());
			$result->bindValue(':name', $milestones->name());
			$result->bindValue(':show_field', $milestones->show_field());
			$result->bindValue(':date', $milestones->date());
			$result->bindValue(':comment', $milestones->comment());
			
			$output['reponse'] = $result->execute();
			$this->lastInsertId = parent::$dao->lastInsertId();
			parent::$dao->commit();
		} catch (\PDOException $e) {
			parent::$dao->rollback();
			$error = $result->errorInfo();
			if ($error[1] == '1062') {
				$output['reponse'] = 'This code already exists in the database.';
			} else {
				$output['reponse'] = 'The update of the database is not successful!<br/>';
				$output['reponse'] .= "Code Error: " . $e->getCode() . "<br/>";
				$output['reponse'] .= "Syntax Error: " . $e->getMessage();
			}
		}
		return $output;
	}

	public function modify(\Library\HTTPRequest $request) {
		$milestones = $this->getData($request);
		$query = "UPDATE ts_milestones SET 
			task_id = :task_id,
			milestone_type_id = :milestone_type_id,
			milestone_field_id = :milestone_field_id,
			name = :name,
			show_field = :show_field,
			date = :date,
			comment = :comment
		WHERE milestone_id = :id";
		try {
			parent::$dao->beginTransaction();
			$result = parent::$dao->prepare($query);
			
			$result->bindValue(':id', $milestones->id(), \PDO::PARAM_INT);
			$result->bindValue(':task_id', $milestones->task_id());
			$result->bindValue(':milestone_type_id', $milestones->milestone_type_id());
			$result->bindValue(':milestone_field_id', $milestones->milestone_field_id());
			$result->bindValue(':name', $milestones->name());
			$result->bindValue(':show_field', $milestones->show_field());
			$result->bindValue(':date', $milestones->date());
			$result->bindValue(':comment', $milestones->comment());
			
			$output['reponse'] = $result->execute();
			parent::$dao->commit();
		} catch (\PDOException $e) {
			parent::$dao->rollback();
			$error = $result->errorInfo();
			if ($error[1] == '1062') {
				$output['reponse'] = 'This code already exists in the database.';
			} else {
				$output['reponse'] = 'The update of the database is not successful!<br/>';
				$output['reponse'] .= "Code Error: " . $e->getCode() . "<br/>";
				$output['reponse'] .= "Syntax Error: " . $e->getMessage();
			}
		}
		return $output;
	}

	public function delete($id) {
		$query = "DELETE FROM ts_milestones WHERE milestone_id = " . (int) $id;
		try {
			parent::$dao->beginTransaction();
			$result = parent::$dao->prepare($query);
			$output['reponse'] = $result->execute();
			parent::$dao->commit();
		} catch (\PDOException $e) {
			parent::$dao->rollback();
			$output['reponse'] = 'The update of the database is not successful!<br/>';
			$output['reponse'] .= "Code Error: " . $e->getCode() . "<br/>";
			$output['reponse'] .= "Syntax Error: " . $e->getMessage();
		}
		return $output;
	}
}