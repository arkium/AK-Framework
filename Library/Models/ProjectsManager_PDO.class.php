<?php

// Class: ProjectsManager_PDO.class.php
// Table: ts_projects
// Generated by createEntity.php, written by Paulo Ferreira (paulo.ferreira@arkium.eu)
// Date : Sat, 14 Dec 2013 17:14:18 +0000
namespace Library\Models;

class ProjectsManager_PDO extends ProjectsManager {

	private function getData(\Library\HTTPRequest $request) {
		return new \Library\Entities\Projects(array(
				'project_id' => (int) $request->postData('project_id'),
				'code' => (string) $request->postData('code'),
				'name' => (string) $request->postData('name'),
				'invoicing_entity_id' => (int) $request->postData('invoicing_entity_id'),
				'customer_id' => (int) $request->postData('customer_id'),
				'note' => (string) $request->postData('note'),
				'status' => (int) $request->postData('status'),
				'update_time' => (string) $request->postData('update_time'),
				'created_time' => (string) $request->postData('created_time') 
		));
	}

	public function getDatabases(\Library\HTTPRequest $request, \Library\Datatable $ini) {
		$table = new \Library\Datatables($request, $ini);
		return $table->run();
	}

	public function getList($debut = -1, $limite = -1) {
		$query = "SELECT * FROM ts_projects";
		if ($debut != -1 || $limite != -1) {
			$query .= ' LIMIT ' . (int) $limite . ' OFFSET ' . (int) $debut;
		}
		try {
			$result = parent::$dao->query($query);
			$output = $result->fetchAll();
			$result->closeCursor();
		} catch (\PDOException $e) {
			$output['reponse'] = 'The database is not able to be read!<br/>';
			$output['reponse'] .= "Code Error: " . $e->getCode() . "<br/>";
			$output['reponse'] .= "Syntax Error: " . $e->getMessage();
		}
		return $output;
	}

	public function getUnique($id) {
		$query = "SELECT 
			project_id,
			code,
			name,
			invoicing_entity_id,
			customer_id,
			note,
			status,
			update_time,
			created_time
		FROM ts_projects
		WHERE project_id = :id";
		try {
			$result = parent::$dao->prepare($query);
			$result->bindValue(':id', (int) $id, \PDO::PARAM_INT);
			$result->execute();
			// $result->setFetchMode(\PDO::FETCH_CLASS | \PDO::FETCH_PROPS_LATE, '\Library\Entities\Projects');
			$output = (array) $result->fetch(\PDO::FETCH_NUM);
			
			$output['reponse'] = true;
		} catch (\PDOException $e) {
			$output['reponse'] = 'The database is not able to be read!<br/>';
			$output['reponse'] .= "Code Error: " . $e->getCode() . "<br/>";
			$output['reponse'] .= "Syntax Error: " . $e->getMessage();
		}
		return $output;
	}

	public function count() {
		$query = "SELECT COUNT(*) FROM ts_projects";
		return parent::$dao->query($query)->fetchColumn();
	}

	public function add(\Library\HTTPRequest $request) {
		$projects = $this->getData($request);
		$query = "INSERT INTO ts_projects SET 
			code = :code,
			name = :name,
			invoicing_entity_id = :invoicing_entity_id,
			customer_id = :customer_id,
			note = :note,
			status = :status,
			created_time = NOW()";
		try {
			parent::$dao->beginTransaction();
			$result = parent::$dao->prepare($query);
			
			$result->bindValue(':code', $projects->code());
			$result->bindValue(':name', $projects->name());
			$result->bindValue(':invoicing_entity_id', $projects->invoicing_entity_id());
			$result->bindValue(':customer_id', $projects->customer_id());
			$result->bindValue(':note', $projects->note());
			$result->bindValue(':status', $projects->status());
			
			$output['reponse'] = $result->execute();
			parent::$dao->commit();
		} catch (\PDOException $e) {
			parent::$dao->rollback();
			$error = $result->errorInfo();
			if ($error[1] == '1062') {
				$output['reponse'] = 'This code already exists in the database.';
			} else {
				$output['reponse'] = 'The update of the database is not successful!<br/>';
				$output['reponse'] .= "Code Error: " . $e->getCode() . "<br/>";
				$output['reponse'] .= "Syntax Error: " . $e->getMessage();
			}
		}
		return $output;
	}

	public function modify(\Library\HTTPRequest $request) {
		$projects = $this->getData($request);
		$query = "UPDATE ts_projects SET 
			code = :code,
			name = :name,
			invoicing_entity_id = :invoicing_entity_id,
			customer_id = :customer_id,
			note = :note,
			status = :status
		WHERE project_id = :id";
		try {
			parent::$dao->beginTransaction();
			$result = parent::$dao->prepare($query);
			
			$result->bindValue(':id', $projects->id(), \PDO::PARAM_INT);
			$result->bindValue(':code', $projects->code());
			$result->bindValue(':name', $projects->name());
			$result->bindValue(':invoicing_entity_id', $projects->invoicing_entity_id());
			$result->bindValue(':customer_id', $projects->customer_id());
			$result->bindValue(':note', $projects->note());
			$result->bindValue(':status', $projects->status());
			
			$output['reponse'] = $result->execute();
			parent::$dao->commit();
		} catch (\PDOException $e) {
			parent::$dao->rollback();
			$error = $result->errorInfo();
			if ($error[1] == '1062') {
				$output['reponse'] = 'This code already exists in the database.';
			} else {
				$output['reponse'] = 'The update of the database is not successful!<br/>';
				$output['reponse'] .= "Code Error: " . $e->getCode() . "<br/>";
				$output['reponse'] .= "Syntax Error: " . $e->getMessage();
			}
		}
		return $output;
	}

	public function delete($id) {
		$query = "DELETE FROM ts_projects WHERE project_id = " . (int) $id;
		try {
			parent::$dao->beginTransaction();
			$result = parent::$dao->prepare($query);
			$output['reponse'] = $result->execute();
			parent::$dao->commit();
		} catch (\PDOException $e) {
			parent::$dao->rollback();
			$output['reponse'] = 'The update of the database is not successful!<br/>';
			$output['reponse'] .= "Code Error: " . $e->getCode() . "<br/>";
			$output['reponse'] .= "Syntax Error: " . $e->getMessage();
		}
		return $output;
	}
}