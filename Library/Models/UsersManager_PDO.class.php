<?php

// Class: UsersManager_PDO.class.php
// Table: ts_users
// Generated by createEntity.php, written by Paulo Ferreira (paulo.ferreira@arkium.eu)
// Date : Sat, 20 May 2017 16:20:31 +0200

namespace Library\Models;

class UsersManager_PDO extends UsersManager {

	private function getData(\Library\HTTPRequest $request) {
		return new \Library\Entities\Users(array(
				'user_id' => (int) $request->postData('user_id'),
				'code' => (string) $request->postData('code'),
				'first_name' => (string) $request->postData('first_name'),
				'last_name' => (string) $request->postData('last_name'),
				'email_address' => (string) $request->postData('email_address'),
				'level' => (int) $request->postData('level'),
				'username' => (string) $request->postData('username'),
				'password' => (string) $request->postData('password'),
				'company_id' => (int) $request->postData('company_id'),
				'contract' => (string) $request->postData('contract'),
				'status' => (int) $request->postData('status'),
				'update_time' => (string) $request->postData('update_time'),
				'created_time' => (string) $request->postData('created_time'),
				'session' => (string) $request->postData('session'),
				'typetimesheet' => (int) $request->postData('typetimesheet')
		));
	}

	public function getDatabases(\Library\HTTPRequest $request, \Library\Datatable $ini) {
		$table = new \Library\Datatables($request, $ini);
		return $table->run();
	}

	public function getList($debut = -1, $limite = -1) {
		$query = "SELECT * FROM ts_users";
		if ($debut != -1 || $limite != -1) {
			$query .= ' LIMIT ' . (int) $limite . ' OFFSET ' . (int) $debut;
		}
		try {
			$result = parent::$dao->query($query);
			$output = $result->fetchAll();
			$result->closeCursor();
		} catch (\PDOException $e) {
			$output['reponse'] = 'The database is not able to be read!<br/>';
			$output['reponse'] .= "Code Error: " . $e->getCode() . "<br/>";
			$output['reponse'] .= "Syntax Error: " . $e->getMessage();
		}
		return $output;
	}

	public function getUnique($id) {
		$query = "SELECT 
			user_id,
			code,
			first_name,
			last_name,
			email_address,
			level,
			username,
			password,
			company_id,
			contract,
			status,
			update_time,
			created_time,
			session,
			typetimesheet
		FROM ts_users
		WHERE user_id = :id";
		try {
			$result = parent::$dao->prepare($query);
			$result->bindValue(':id', (int) $id, \PDO::PARAM_INT);
			$result->execute();
			// $result->setFetchMode(\PDO::FETCH_CLASS | \PDO::FETCH_PROPS_LATE, '\Library\Entities\Users');
			$output = (array) $result->fetch(\PDO::FETCH_NUM);

			$output['reponse'] = true;
		} catch (\PDOException $e) {
			$output['reponse'] = 'The database is not able to be read!<br/>';
			$output['reponse'] .= "Code Error: " . $e->getCode() . "<br/>";
			$output['reponse'] .= "Syntax Error: " . $e->getMessage();
		}
		return $output;
	}

	public function count() {
		$query = "SELECT COUNT(*) FROM ts_users";
		return parent::$dao->query($query)->fetchColumn();
	}

	public function add(\Library\HTTPRequest $request) {
		$Users = $this->getData($request);
		$query = "INSERT INTO ts_users SET 
			code = :code,
			first_name = :first_name,
			last_name = :last_name,
			email_address = :email_address,
			level = :level,
			username = :username,
			password = :password,
			company_id = :company_id,
			contract = :contract,
			status = :status,
			created_time = NOW(),
			session = :session,
			typetimesheet = :typetimesheet";
		try {
			parent::$dao->beginTransaction();
			$result = parent::$dao->prepare($query);

			$result->bindValue(':code', $Users->code());
			$result->bindValue(':first_name', $Users->first_name());
			$result->bindValue(':last_name', $Users->last_name());
			$result->bindValue(':email_address', $Users->email_address());
			$result->bindValue(':level', $Users->level());
			$result->bindValue(':username', $Users->username());
			$result->bindValue(':password', $Users->password());
			$result->bindValue(':company_id', $Users->company_id());
			$result->bindValue(':contract', $Users->contract());
			$result->bindValue(':status', $Users->status());
			$result->bindValue(':session', $Users->session());
			$result->bindValue(':typetimesheet', $Users->typetimesheet());

			$output['reponse'] = $result->execute();
			$this->lastInsertId = parent::$dao->lastInsertId();
			$output['lastID'] = $this->lastInsertId;
			parent::$dao->commit();
		} catch (\PDOException $e) {
			parent::$dao->rollback();
			$error = $result->errorInfo();
			if ($error[1] == '1062') {
				$output['reponse'] = 'This code already exists in the database.';
			} else {
				$output['reponse'] = 'The update of the database is not successful!<br/>';
				$output['reponse'] .= "Code Error: " . $e->getCode() . "<br/>";
				$output['reponse'] .= "Syntax Error: " . $e->getMessage();
			}
		}
		return $output;
	}

	public function modify(\Library\HTTPRequest $request) {
		$Users = $this->getData($request);
		$query = "UPDATE ts_users SET 
			code = :code,
			first_name = :first_name,
			last_name = :last_name,
			email_address = :email_address,
			level = :level,
			username = :username,
			password = :password,
			company_id = :company_id,
			contract = :contract,
			status = :status,
			session = :session,
			typetimesheet = :typetimesheet
		WHERE user_id = :id";
		try {
			parent::$dao->beginTransaction();
			$result = parent::$dao->prepare($query);

			$result->bindValue(':id', $Users->id(), \PDO::PARAM_INT);
			$result->bindValue(':code', $Users->code());
			$result->bindValue(':first_name', $Users->first_name());
			$result->bindValue(':last_name', $Users->last_name());
			$result->bindValue(':email_address', $Users->email_address());
			$result->bindValue(':level', $Users->level());
			$result->bindValue(':username', $Users->username());
			$result->bindValue(':password', $Users->password());
			$result->bindValue(':company_id', $Users->company_id());
			$result->bindValue(':contract', $Users->contract());
			$result->bindValue(':status', $Users->status());
			$result->bindValue(':session', $Users->session());
			$result->bindValue(':typetimesheet', $Users->typetimesheet());

			$output['reponse'] = $result->execute();
			$output['lastID'] = $Users->id();
			parent::$dao->commit();
		} catch (\PDOException $e) {
			parent::$dao->rollback();
			$error = $result->errorInfo();
			if ($error[1] == '1062') {
				$output['reponse'] = 'This code already exists in the database.';
			} else {
				$output['reponse'] = 'The update of the database is not successful!<br/>';
				$output['reponse'] .= "Code Error: " . $e->getCode() . "<br/>";
				$output['reponse'] .= "Syntax Error: " . $e->getMessage();
			}
		}
		return $output;
	}

	public function delete($id) {
		$query = "DELETE FROM ts_users WHERE user_id = " . (int) $id;
		try {
			parent::$dao->beginTransaction();
			$result = parent::$dao->prepare($query);
			$output['reponse'] = $result->execute();
			parent::$dao->commit();
		} catch (\PDOException $e) {
			parent::$dao->rollback();
			$output['reponse'] = 'The update of the database is not successful!<br/>';
			$output['reponse'] .= "Code Error: " . $e->getCode() . "<br/>";
			$output['reponse'] .= "Syntax Error: " . $e->getMessage();
		}
		return $output;
	}

}